{"version":3,"sources":["components/SpoilerComponents/Spoiler.js","components/Wheels.js","components/Car.js","components/BodyPanel.js","components/WheelsPanel.js","components/SpoilerComponents/SpoilerSlider.js","components/SpoilerComponents/SpoilerPanel.js","components/TunerBoard.js","App.js","serviceWorker.js","index.js"],"names":["Spoiler","props","className","style","spoilerBaseStyle","spoilerWingStyle","height","bottom","Wheels","Fragment","wheelsStyle","Car","carStyleProp","spoilerBaseStyleProp","spoilerWingStyleProp","wheelsStyleProp","BodyPanel","useState","red","green","blue","color","setColor","textAlign","type","min","max","defaultValue","onChange","e","carStyle","target","value","handleChangeRed","onMouseUp","prevColor","changeColorToRed","handleChangeGreen","changeColorToGreen","handleChangeBlue","changeColorToBlue","WheelsPanel","step","margin","handleChange","SpoilerSlider","React","defaults","setStyle","title","event","spoilerStyle","width","angle","prevState","changeHeight","changeWidth","changeAngle","SpoilerPanel","TunerBoard","App","backgroundColor","borderRadius","setCarStyle","setWheelsStyle","transform","setSpoilerBaseStyle","position","left","setSpoilerWingStyle","console","log","prevCarStyle","prevWheelsStyle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.478f0363.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nfunction Spoiler(props) {\n    return (\n        <div className=\"spoiler\" style={props.spoilerBaseStyle}>\n            <div style={props.spoilerWingStyle}>\n            </div>\n        </div>\n    )\n}\n\nexport default Spoiler;","import React from 'react';\n\nlet height = {\n    bottom: '-15px'\n}\n\nfunction Wheels(props) {\n    return (\n        <React.Fragment>\n            <div className=\"front-wheel\" style={height}>\n                <div style={props.wheelsStyle}></div>\n            </div>\n            <div className=\"rear-wheel\" style={height}>\n                <div style={props.wheelsStyle}></div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Wheels;\n","import React from 'react';\nimport Spoiler from './SpoilerComponents/Spoiler';\nimport Wheels from './Wheels';\n\n\nfunction Car(props) {\n    return (\n        <div style={props.carStyleProp} className=\"car\">\n            <div className=\"cabin\">\n                <div className=\"cabin-front\"></div>\n                <div className=\"cabin-rear\"></div>\n            </div>\n            <Spoiler spoilerBaseStyle={props.spoilerBaseStyleProp} spoilerWingStyle={props.spoilerWingStyleProp} />\n            <Wheels wheelsStyle={props.wheelsStyleProp} />\n        </div>\n    )\n}\n\nexport default Car;","import React, { useState } from 'react';\n\nfunction BodyPanel(props) {\n    const [color, setColor] = useState({\n        red: 0,\n        green: 210,\n        blue: 100\n    })\n\n    let handleChangeRed = (e) => {\n        props.carStyle(`rgb(${e.target.value}, ${color.green}, ${color.blue})`);\n    }\n\n    let changeColorToRed = (e) => {\n        let value = e.target.value;\n        setColor(prevColor => { return { ...prevColor, red: value } });\n    }\n\n\n\n    let handleChangeGreen = (e) => {\n        props.carStyle(`rgb(${color.red}, ${e.target.value}, ${color.blue})`);\n    }\n\n    let changeColorToGreen = (e) => {\n        let value = e.target.value;\n        setColor(prevColor => { return { ...prevColor, green: value } });\n    }\n\n\n\n    let handleChangeBlue = (e) => {\n        props.carStyle(`rgb(${color.red}, ${color.green}, ${e.target.value}`);\n    }\n\n    let changeColorToBlue = (e) => {\n        let value = e.target.value;\n        setColor(prevColor => { return { ...prevColor, blue: value } });\n    }\n    return (\n        <div className=\"panel\">\n            <h2 style={{ textAlign: \"center\" }}>Body</h2>\n            <h4>Color</h4>\n            <div className=\"slider-menu\">\n                <div>\n                    Red:<br />Green:<br />Blue:\n                </div>\n                <div>\n                    <input\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"255\"\n                        defaultValue=\"0\"\n                        onChange={e => handleChangeRed(e)}\n                        onMouseUp={e => changeColorToRed(e)}\n                    />\n                    <input\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"255\"\n                        defaultValue=\"210\"\n                        onChange={e => handleChangeGreen(e)}\n                        onMouseUp={e => changeColorToGreen(e)}\n                    />\n                    <input\n                        type=\"range\"\n                        min=\"0\"\n                        max=\"255\"\n                        defaultValue=\"100\"\n                        onChange={e => handleChangeBlue(e)}\n                        onMouseUp={e => changeColorToBlue(e)}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default BodyPanel;","import React from 'react';\n\nfunction WheelsPanel(props) {\n\n    let handleChange = (e) => {\n        let value = e.target.value;\n        let margin = (100 - value) / 2\n        props.wheelsStyle(`${value}%`, `${value}%`, `${margin}%`)\n    }\n    return (\n        <div className=\"panel\">\n            <h2 style={{ textAlign: \"center\" }}>Wheels</h2>\n            <h4>Size</h4>\n            <div className=\"slider-menu\">\n                <div>Diameter:</div>\n                <div>\n                    <input\n                        type=\"range\"\n                        min=\"50\"\n                        max=\"90\"\n                        step=\"0.5\"\n                        defaultValue=\"80\"\n                        onChange={e => handleChange(e)}\n                    />\n                </div>\n            </div>\n\n        </div>\n\n    )\n}\n\nexport default WheelsPanel;","import React from 'react';\n\nfunction SpoilerSlider(props) {\n\n    const [style, setStyle] = React.useState(props.defaults);\n\n    const changeHeight = (event) => {\n        let value = event.target.value;\n        props.spoilerStyle(`${value}px`, `${style.width}px`, `rotate(${style.angle}deg)`);\n        setStyle(prevState => {\n            return { ...prevState, height: value }\n        })\n    }\n\n    const changeWidth = (event) => {\n        let value = event.target.value;\n        props.spoilerStyle(`${style.height}px`, `${value}px`, `rotate(${style.angle}deg)`);\n        setStyle(prevState => {\n            return { ...prevState, width: value }\n        })\n    }\n\n    const changeAngle = (event) => {\n        let value = event.target.value;\n        props.spoilerStyle(`${style.height}px`, `${style.width}px`, `rotate(${value}deg)`);\n        setStyle(prevState => {\n            return { ...prevState, angle: value }\n        })\n    }\n\n    return (\n        <React.Fragment>\n            <h4>{props.title}</h4>\n            <div className=\"slider-menu\">\n                <div>\n                    Height:<br />Width:<br />Angle:<br />\n                </div>\n                <div>\n                    <input\n                        type=\"range\"\n                        max=\"100\"\n                        min=\"0\"\n                        defaultValue={props.defaults.height}\n                        onChange={event => changeHeight(event)}\n                    />\n                    <input\n                        type=\"range\"\n                        max={props.title === \"Base\" ? \"20\" : \"100\"}\n                        min=\"1\"\n                        defaultValue={props.defaults.width}\n                        onChange={event => changeWidth(event)}\n                    />\n                    <input\n                        type=\"range\"\n                        min={props.defaults.angle - 90}\n                        max={props.defaults.angle + 90}\n                        defaultValue={props.defaults.angle}\n                        onChange={event => changeAngle(event)}\n                    />\n                </div>\n            </div>\n\n        </React.Fragment>\n    )\n}\n\nexport default SpoilerSlider;","import React from 'react';\nimport SpoilerSlider from './SpoilerSlider';\n\nfunction SpoilerPanel(props) {\n\n    return (\n        <div className=\"panel\">\n            <h2 style={{ textAlign: \"center\" }}>Spoiler</h2>\n            <SpoilerSlider\n                title=\"Base\"\n                defaults={{ height: 30, width: 10, angle: 200 }}\n                spoilerStyle={props.spoilerBaseStyle}\n            />\n            <SpoilerSlider\n                title=\"Wing\"\n                defaults={{ height: 10, width: 50, angle: -30 }}\n                spoilerStyle={props.spoilerWingStyle}\n            />\n        </div>\n    )\n}\n\nexport default SpoilerPanel;","import React from 'react';\nimport BodyPanel from './BodyPanel'\nimport WheelsPanel from './WheelsPanel'\nimport SpoilerPanel from './SpoilerComponents/SpoilerPanel';\n\nfunction TunerBoard(props) {\n    return (\n        <div className=\"tuner-board\">\n            <BodyPanel carStyle={props.carStyle} />\n            <WheelsPanel wheelsStyle={props.wheelsStyle} />\n            <SpoilerPanel\n                spoilerWingStyle={props.spoilerWingStyle}\n                spoilerBaseStyle={props.spoilerBaseStyle}\n            />\n        </div>\n    )\n}\n\nexport default TunerBoard;","import React, { useState } from 'react';\nimport Car from './components/Car';\nimport TunerBoard from './components/TunerBoard';\n\nfunction App() {\n\n  const [carStyle, setCarStyle] = useState({\n    height: '110px',\n    width: '435px',\n    backgroundColor: 'rgb(0, 210, 100)',\n    borderRadius: '50% 10px 25% 10px'\n  });\n\n  const [wheelsStyle, setWheelsStyle] = useState({\n    width: '80%',\n    height: '80%',\n    margin: '10%',\n    backgroundColor: '#ddd',\n    borderRadius: '50%'\n  })\n\n  const [spoilerBaseStyle, setSpoilerBaseStyle] = useState({\n    height: '30px',\n    width: '10px',\n    transform: 'rotate(200deg)',\n    backgroundColor: '#333'\n  })\n\n  const [spoilerWingStyle, setSpoilerWingStyle] = useState({\n    height: '10px',\n    width: '50px',\n    position: 'absolute',\n    bottom: '-5px',\n    left: 'calc(50% - 25px)',\n    backgroundColor: '#222',\n    transform: 'rotate(-30deg)'\n  })\n\n  console.log(spoilerWingStyle);\n  return (\n    <React.Fragment>\n      <Car\n        carStyleProp={carStyle}\n        spoilerBaseStyleProp={spoilerBaseStyle}\n        spoilerWingStyleProp={spoilerWingStyle}\n        wheelsStyleProp={wheelsStyle}\n\n      />\n      <TunerBoard\n        carStyle={(backgroundColor) => setCarStyle(prevCarStyle => {\n          return { ...prevCarStyle, backgroundColor }\n        })}\n        wheelsStyle={(height, width, margin) => setWheelsStyle(prevWheelsStyle => {\n          return { ...prevWheelsStyle, height, width, margin }\n        })}\n        spoilerBaseStyle={(height, width, transform) => setSpoilerBaseStyle({ height, width, transform })}\n        spoilerWingStyle={(height, width, transform) => setSpoilerWingStyle(prevState => {\n          return { ...prevState, height, width, transform /*, right: `-${Number(width.replace('px', '')) + 2}px` */ }\n        })}\n      />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}